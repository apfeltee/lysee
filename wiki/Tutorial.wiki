==1 Introduction==

Lysee is a small, fast, reliable and cross platform script language. Its interpreter is a standalone program. Lysee kernel is used to be embedded into Pascal programs as a critical mission controler and script the host. Lysee script can be embedded into HTML to develop active WEB sites.

"LSE" is abbreviation of "Lysee Script Engine".

*Features*

  * Written in pure Pascal language.
  * Support module and functional programings.
  * Run in platforms where [http://www.freepascal.org/ Free Pascal], [http://www.lazarus.freepascal.org/ Lazarus] or Delphi exist.

----
==2 Install and configure==

----
===2.1 Installation===

Download the latest installer or source code:

|| *Platform* || *How to* || *Default Position* ||
|| Windows || Run the installer || c:\lysee ||
|| Linux/Unix || make; sudo make install || /usr/local/lib/lysee ||

----
===2.2 File Structure===

|| *Name* || *Type* || *Linux/Unix* || *Windows* || *Description* ||
|| modules || folder || * || * || stores lysee modules ||
|| manual || folder || * || * || manuals  ||
|| temp || folder ||  N/A || * || temporary file directory ||
|| LICENSE || file || * || * || license file  ||
|| COPYING || file || * || * || Modified BSD ||
|| lysee.dll || library || N/A || * || kernel ||
|| lysee.so || library || * || N/A || kernel ||
|| lysee.config || file || * || * || configuration file ||
|| lysee.exe || program || N/A || * || interpreter ||
|| lysee_fpc.exe || program || N/A || * || interpreter build with FPC ||
|| lysee || program || * || N/A ||  interpreter ||
|| lysee_pad.exe || program || N/A || * || syntax highlighter editor ||
|| lysee_pad || program || * || N/A || syntax highlighter editor ||

----
===2.3 Configuration===

Add installation path to system search PATH:

|| *Platform* || *How to* ||
|| Windows || attch installation path to system environment variable PATH ||

Edit file lysee.config to configure lysee:
 
|| *Variable* || *Description* || *Default Value* ||
|| lse_tmpath || temporary directory || ${LYSEE}/temp ||
|| lse_search || module search path || ${LYSEE}/modules ||

The following constants can be used in lysee.config:

|| *Constant* || *Description* || *Value* ||
|| ${confile} || Configuration file name || Full file name of file lysee.config ||
|| ${kernel} || Kernel file name || Full file name of kernel ||
|| ${kndir} || Kernel directory  || Full file name of kernel directory ||
|| ${knpath} || Kernel path  || Full file name of kernel path ||
|| ${home} || Home path of user || Full file name of current user home path ||
|| ${program} || current program || ParamStr(0) ||
|| ${tmpath} || temporary path || Set by lse_tmpath in lysee.config ||
|| ${search} || module search path || Set by lse_search in lysee.config ||
|| ${keywords} || keyword list || main,int,string,for,while,... ||
|| ${mimefile} || MIME file || ${knpath}/mime.config ||

----
===2.4 Test===

Open a console and type "lysee" and give a ENTER, you will see something like below.

{{{
lysee 3.0.1 - Copyright (c) 2003-2011 Li Yun Jie

   :: /C=CANCEL /F=FILE /Q=QUIT /R=RESTART ::

>>>
}}}

----
===2.5 Hello World===

Let's print "Hello World":

{{{
lysee 3.0.1 - Copyright (c) 2003-2011 Li Yun Jie

   :: /C=CANCEL /F=FILE /Q=QUIT /R=RESTART ::

>>> print("Hello World")
Hello World 
>>>
}}}

Where, ">>>" prompts you enter lysee command or script.

----
===2.6 Execute Script File===

Save "print("hello world")" to file hw.ls, and run it with lysee:

{{{
c:\lysee>lysee hw.ls
Hello World 
c:\lysee>
}}}

".ls" is file extension of Lysee script file.

----
===2.7 Command Line Arguments===

Run " lysee --help" to print Lysee usages:

{{{
c:\lysee>lysee --help
Lysee 3.0.1 - interactive LYSEE script interpreter

Usage: lysee [OPTION]... [FILE [ARGS]...]

Option:
  -v, --version           display the version of lysee and exit.
  -h, --help              print this help and exit.
  -s, --search=PATH       set module search path.
  -S, --script=SCRIPT     execute script.
  -w, --wait=SECONDS      wait for some seconds before going on.
  -t, --times=COUNT       execute specified times.
  -p, --pause             pause after execute script file.

File:
  .ls                     execute this file directly.
  .lsp, .html, .htm, .*   execute as a LSP file (Lysee Script Page).

Args:
  *                       arguments for file execution.

c:\lysee>
}}}

*Options:*

|| *Option* || *Attachments* ||	*Description* ||
|| -v/--version || None || Print version informations and quit ||
|| -h/--help || None || Print usages and quit ||
|| -s/--search || Path list seperated with ';' || Add search path ||
|| -w/--wait || Seconds || Wait for seconds before running ||
|| -t/--times || Times || Repeat running times ||
|| -p/--pause || None || Pause after execute a file ||

*File:*

|| *Extension* || *File Type* || *Description* ||
|| .ls || Lysee script file or  module || Pure lysee statement ||
|| .lsp ||  LSP（Lysee Script Page） || Active HTML web page ||
|| * ||	Deal as .lsp file || produce WEB page ||

*Args:*

Can be accessed with string list @args.

*Command Lines:*

|| *Command Line* || *Description* ||
|| lysee backup.ls "skip=.tmp,....,.ppu" || backup lysee project ||
|| lysee -w 3600 -t 9999 spider.ls || run web spider once an hour ||
|| lysee logout.lsp user=mack || user mack logout||

----
==3 Language Reference==

----
===3.1 Tokens===

These are lysee keywords, identities, numbers and strings here.

*3.1.1 Charactors*

Lysee script is is made of these charactors:

|| *Type* || *Range* || *Usage* ||
|| letter || a..z A..Z _ || identities, keywords ||
|| digit || 0..9 || numbers, identities ||
|| char || + - * / \ = < > [ ] ( ) : ^ @ { } $ # ... || operators, delimiters, comments ||
|| char pair || // /* */ == != >= <= || comments, operators ||
|| space || SPACE, TAB, \n, \r, ... || delimiters ||

*3.1.2 Comments*

Line comments and block comments:

|| *Type* || *Begin Tag * || *End Tag* || *Sample* ||
|| Line Comment 1 || # || #13, #10, EOF || # a shell comment ||
|| Line Comment 2 || // || #13, #10, EOF || // a line comment ||
|| Block Comment || /* || */ || /* This is a block comment */ ||

*3.1.3 Identity*

Identity consists of alpha, '_' and digit charactors, and the first charactor must not be digit.

|| *Status* || *Identity* || *Reason* ||
|| Yes || JAMES_is_007 || ||
|| No || 007_is_JAMES || Starts with digit ||

Identity is case sensitive, abc、Abc、ABc and ABC are different.

*3.1.4 Keywords*

{{{
>>> print(@keywords)
@catch,@each,@filter,@folder,@loop,@map,@reduce,@throw,@yield,
and,as,break,continue,def,do,downto,elif,else,end,float,for,if,
in,int,is,like,main,object,or,repeat,return,set,string,sys,then,
to,until,variant,void,while
>>>
}}}

*3.1.5 Number*

Number has 2 types, int and float:

|| *Type* || *Base 10* || *Base 16* ||
|| int || 2008 || 0x07D8 ||
|| float || 2008.4 || N/A ||

*3.1.6 String*

Lysee char is single byte ANSI char(0..255): 'a'..'z', '0'..'9', ...

Escaped charactors are listed below:

|| *Char* || *Base 16 Escape* || *ASCII* || *Description * ||
|| \0 || \x00 || 0 || end of string ||
|| \a || \x07 || 7 | BELL ||
|| \b || \x08 || 8 || BACKSPACE ||
|| \e || \x1B || 27 || ESCAPE ||
|| \f || \x0C || 12 || FORMFEED ||
|| \n || \x0A || 10 || NEWLINE ||
|| \r || \x0D || 13 || CARRIGE RETURN ||
|| \t || \x09 || 9 || TAB ||
|| \v || \x0B || 11 || 	VERTICAL TAB ||
|| \\ || \x5C || 92 || '\' ||
|| \' || \x27 || 39 || single quote mark ||
|| \" || \x22 || 34 || double quote mark ||

string is sequence of char, ended with '\0'. string has 2 formats:

|| *Format* || *Begin Tag* || *End Tag* || *Example* || *Escape* || *Description* ||
|| 1 || " || " || "c:\\lysee\\lysee.exe" || Yes || Escaped with '\' ||
|| 2 || ' || ' || 'c:\lysee\lysee.exe' || No || No escape ||

Lysee string can span over two or more lines.

----
===3.2 Types===

*3.2.1 Simple Types*

There are 3 buildin simple types in kernel:

|| *Type* || *Description * ||
|| string || '\0' ended ANSI string ||
|| int || integer(64bits) ||
|| float || double(64bits) ||

*3.2.2 Other types*

|| *Type* || *Description * ||
|| void || has only one value: @nil ||
|| variant || cantains any value of any type ||
|| type || type of type ||
|| module || kernel module or other loaded modules ||
|| function || function ||
|| stream || file stream, memory stream, socket stream, ... ||
|| varlist || variant list ||
|| hashed || map, dictionary ||
|| vargen || variant generator ||
|| time || time ||

*3.2.3 Variant*

Variant can be any data type, depends on the time you check:

{{{
>>> set v = "string"
string
>>> set v = 18
18
>>> set v = {,} # empty varlist
{,}
>>> add(v "hello world") # add a line
0
>>> add(v 10)
1
>>> print(v)
{"hello world",10}
>>>
}}}

*3.2.4 Vargen*

vargen means variant generator, used to enum sub items of varlist, string, stream or ranges:

vargen for varlist:

{{{
>>> set g = {0 1 2 3 4} as vargen
>>> for x in g do print(x) end
01234
>>> for x in {0 1 2 3 4} do print(x) end
01234
>>>
}}}

vargen for string:

{{{
>>> set g = "hello" as vargen
>>> for x in g do print(x.upper()) end
HELLO
>>> for x in "hello" do print(x.upper()) end
HELLO
>>>
}}}

vargen for integer: 

{{{
>>>set g = 5 as vargen
>>> for x in g do print(x) end
01234
>>> for x in 5 do print(x) end
01234
>>> for x in 0..4 do print(x) end
01234
>>> 
>>> for x = 0 to 4 do print(x) end
01234
>>> for x = 4 downto 0 do print(x) end
43210
>>> 
}}}

vargen for stream:

{{{
>>> set m = memory()
>>> m.write("hello")
5
>>> m.seek(0)
>>> for x in m do println('\x' + hex(x) + ": " + chr(x)) end
\x68: h
\x65: e
\x6C: l
\x6C: l
\x6F: o
>>>
}}}

----
===3.3 Variables===

*3.3.1 What is Variable?*

Variable is a named value in stack or memory.

*3.3.2 Local Variables*

Define local variable by assign value to it. Default variable type is variant if not specified.
{{{
>>> set v1 = 10
10
>>> set v2 = 4
4
>>> set min_value = v1 > v2 ? v2 : v1
4
>>> min_value
4
>>>
}}}

*3.3.3 Formal Parameters*

Parameters of a function.

----
===3.4 Constants===

*3.4.1 Simple Constants*

Contant values of builtin simple types:

|| *Type* || *Sample values* ||
|| string || "I like coding" ||
|| int ||  -843, 0, 1, 2008 ||
|| float || 3.1415926, 0.618 ||

*3.4.2 @Constants*
{{{
>>> @?
@...     :  current context
@?       :  @XXXX list
@nil     :  nil value
@eol     :  line break
@confile :  config file
@kernel  :  kernel file
@knpath  :  kernel file path
@kndir   :  kernel file directory
@home    :  home path of current user
@program :  program file
@search  :  search path
@tmpath  :  temp path
@keywords:  keyword list
@now     :  current time
@args    :  argument list
@envs    :  environment value list
@dir     :  current directory
@modules :  loaded modules
@libs    :  system level modules
@file    :  current file
@func    :  current function
@line    :  current line number
@main    :  main function
@maxint  :  max integer value
@minint  :  min integer value
@module  :  current module
@pd      :  path delimiter
@inmain  :  check in main function
@errno   :  error number
@ename   :  error name
@emsg    :  error message
@erow    :  error row
@ecol    :  error col
@efile   :  error file
@emodule :  error module
@etext   :  formated error text
>>>
}}}

----
===3.5 Functions===

Lysee function includes normal and lambda functions.

*3.5.1 Normal function*

*Syntax:* *def* FuncName(ParamList) .... *end*

{{{
>>> def repeatStr(S times)
  >   S * times
  > end
>>> repeatStr("Aa" 4)
AaAaAaAa
>>>
}}}

*3.5.2 Lambda functions*

Lambda function is used as a simple value in expression.

*Syntax 1:* *def*(ParamList) .... *end*

{{{
>>> @map 10 def(v) v + 1 end
{1 2 3 4 5 6 7 8 9 10}
>>>
}}}

*Syntax 2:* !expression

Where, _*!expression*_ is the equal of _*def(`_`) expression end*_

{{{
>>> @map 10 !_ + 1
{1 2 3 4 5 6 7 8 9 10}
>>>
}}}

----
===3.6 Expressions===

Expression is any legal combination of symbols that represents a value:

|| Usages || Example ||
|| Assign Value || set magic = sys::random() % 100 ||
|| Condition || if handle == 0 then @throw "Failed open file" end ||
|| Constants || "OK" 1 3.14 ||
|| Enviroment || ${PATH} ||
|| Call Function || sys::genid() ||

Expression in Lysee is calculated from left to right.

*3.6.1 Operators*

Operators in Lysee has different priority levels. They are list below from hight to low:

|| *Level* || * Operators* ||
|| 1 || *  /  % ||
|| 2 || +  -  ||
|| 3 || ^  &  `|`  <<  >> ||
|| 4 || is  as ||
|| 5 || ==  !=  <  <=  >  >=  in like ||
|| 6 || and  or ||

*3.6.2 Concatenate strings*

Use operator + to concatenate strings:

{{{
>>> "hello" + "world"
helloworld
>>> "TIME: " + @now
TIME: 20120121121814046
>>>
}}}

*3.6.3 Times Concatenate*

Use operator `*` to cocatenate string by specified times. In this case left value must be a string and right value must be a integer, or else nil is returned:

{{{
>>> "Aa" * 4;
AaAaAaAa
>>> = "Cc" * 1.42;

>>>
}}}

*3.6.4 Shift Left Insert*

When calculate OBJECT << VALUE, Lysee will try to insert/add VALUE into/to OBJECT, and expression result is the object:

{{{
>>> set a = {,}
{,}
>>> a << 10
{10}
>>> a << 100
{10 100}
>>>
}}}

The OBJECT should be stream,varlist or user defined containers.

*3.6.5 varlist object*

Syntax: {V1 V2 ...} or {V1, V2, ...}

{{{
>>> set a = {1 2 3}
{1 2 3}
>>> set a = {} << 1 << 2 << 3;
>>>
{1 2 3}
>>> a = varlist() << 1 << 2 << 3;
{1 2 3}
>>> a;
{1 2 3}
>>>
}}}

{} or {,}  means empty varlist object.

*3.6.6 hashed object*

Syntax: {Key1:V1 Key2:V2 ...} or {Key1:V1, Key2:V2, ...}

{{{
>>> set a = {"name": "libudi"
  >          "sex" : "male"
  >          "age" : 40}
{"name":"libudi" "sex":"male" "age":40}
>>> for s in props(a) do
  >   println(s + " " + a[s])
  > end
name libudi
sex male
age 40
>>> set a = {:}
>>> a.name = "libudi"
>>> a.sex = "male"
>>> a.age = 40
>>> for s in props(a) do
  >   println(s + " " + a[s])
  > end
name libudi
sex male
age 40
>>>
}}}

{:} means empty hashed object.